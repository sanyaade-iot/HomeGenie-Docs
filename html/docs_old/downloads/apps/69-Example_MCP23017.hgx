<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>69</Address>
  <Name>Example MCP23017</Name>
  <Group />
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
  <ScriptCondition>Program.Setup(()=&gt;
{
	// register 2 virtual modules using the "switch" widget    
	Program.AddVirtualModules("Expanders.MCP23017", "Switch", "homegenie/generic/switch", 1, 16);                  
});
// returning true will execute the "Code to Run"
return true;
</ScriptCondition>
  <ScriptSource>// This examples will add 16 modules of type "Switch"
// corresponding to A0-A7 and B0-B7 pins, configured as OUTPUT
//
// Change SDA and SCL pins to match your current setup
//
var sdaPin = ConnectorPin.P1Pin03.ToProcessor();
var sclPin = ConnectorPin.P1Pin05.ToProcessor();

//

// implement Control.On, Control.Off, Control.Toggle serice API
// for the domain Expanders.MCP23017
When.WebServiceCallReceived("Expanders.MCP23017", ( args ) =&gt; 
{
	string[] reqs = ((string)args).Split('/');
  	var errormessage = "";
	try
	{
		string pinid = reqs[1];
      	string command = reqs[2];
        //
        var module = Modules.InDomain("Expanders.MCP23017").WithAddress(pinid).Get();
      	module.Parameter("Status.Level").Value = "0";
        //
      	// modules with id from 1 to 8 are mapped as A0-A7
      	// modules with id from 9 to 16 as B0-B7
      	var pinname = "";
      	var i = int.Parse(pinid); 
      	if (i &lt;= 8) 
        {
          	pinname = "A" + (i - 1).ToString();
        }
      	else
        {
          	pinname = "B" + (i - 9).ToString();
        }      
      	//
		var mcppin = (Mcp23017Pin)Enum.Parse(typeof(Mcp23017Pin), pinname);
        using (var driver = new I2cDriver(sdaPin, sclPin))
        {
            var deviceConnection =  new Mcp23017I2cConnection(driver.Connect(0x20));
            deviceConnection.SetDirection(mcppin, Mcp23017PinDirection.Output);
            //
            switch(command)
            {
                // eg. http://hg_address/api/Expanders.MCP23017/1/Control.On
                case "Control.On":
					deviceConnection.SetPinStatus(mcppin, true);
                break;
                // eg. http://hg_address/api/Expanders.MCP23017/3/Control.Off
                case "Control.Off":
					deviceConnection.SetPinStatus(mcppin, false);
                break;
                // eg. http://hg_address/api/Expanders.MCP23017/9/Control.Toggle
              	case "Control.Toggle":
					deviceConnection.Toogle(mcppin);
              	break;
            }
			module.Parameter("Status.Level").Value = deviceConnection.GetPinStatus(mcppin) ? "1" : "0";
        }        
      	//
        return "{ 'ResponseValue' : 'OK' }";    
    } 
  	catch (Exception ex) 
    { 
	    errormessage = ex.Message + " " + ex.StackTrace;
    }
    // unable to process request
    return "{ 'ResponseValue' : 'ERROR " + errormessage + "' }";
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors />
  <ConditionType>OnTrue</ConditionType>
  <Conditions>
    <ProgramCondition>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>37</Target>
      <Property>Sensor.DoorWindow</Property>
      <ComparisonOperator>Equals</ComparisonOperator>
      <ComparisonValue>255</ComparisonValue>
    </ProgramCondition>
  </Conditions>
  <Commands>
    <ProgramCommand>
      <Domain>HomeAutomation.ZWave</Domain>
      <Target>4</Target>
      <CommandString>Control.Off</CommandString>
      <CommandArguments />
    </ProgramCommand>
  </Commands>
  <IsRunning>true</IsRunning>
  <IsEvaluatingConditionBlock>true</IsEvaluatingConditionBlock>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
</ProgramBlock>