<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js">
  <!--<![endif]-->
  <head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>HomeGenie - Documentation</title>
    <meta name="description" content="HomeGenie: Open Source Home Automation Server in a Internet Of Things world. For Windows, Linux, Mac, Raspberry Pi.">
    <meta name="viewport" content="width=device-width">
    <meta name="google-translate-customization" content="4465409ca18a218d-3c5a592dabcc0b15-gd17525dd79b50c62-1c">
    <link rel="stylesheet" href="css/normalize.min.css">
    <link rel="stylesheet" href="css/main.css">
    <!-- JQuery Snippet -->
    <link rel="stylesheet" type="text/css" href="css/jquery.snippet.min.css">
    <!--script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script-->
    <!--script>window.jQuery || document.write('<script src="js/vendor/jquery-1.9.1.min.js"><\/script>')</script-->
    <script type="text/javascript" src="http://gettopup.com/releases/latest/top_up-min.js"></script>
    <script type="text/javascript" src="js/jquery.snippet.min.js"></script>
    <script src="js/plugins.js"></script>
    <script src="js/main.js"></script>
    <script type="text/javascript">
			$(document).ready(function(){
//				setTimeout(function () {
					$("pre.csharp").snippet("csharp", { style: "kwrite", transparent: false, showNum: true });
//				}, 1000);		
				//$('li:odd').css("background-color", "gray");
				//$('li:even').css("background-color", "white");
			});			
		</script>
    <script src="js/vendor/modernizr-2.6.2-respond-1.1.0.min.js"></script>
    <script type="text/javascript">

		  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		  ga('create', 'UA-40902095-1', 'generoso.info');
		  ga('send', 'pageview');
		  
		</script>
  </head>
  <body>
    <!--[if lt IE 7]>
            <p class="chromeframe">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> or <a href="http://www.google.com/chromeframe/?redirect=true">activate Google Chrome Frame</a> to improve your experience.</p>        <![endif]-->
    <div class="header-container">
      <header class="wrapper clearfix">
        <h1 class="title">HomeGenie</h1>
        <nav>
          <ul>
            <li><a href="index.html">Home</a></li>
            <li><a href="learn.html">Docs</a></li>
            <li><a href="download.html">Download</a></li>
          </ul>
        </nav>
      </header>
    </div>
    <div class="main-container">
      <div class="main wrapper clearfix">
        <article style="width:100%">
          <aside class="blank">
            <script type="text/javascript">
						function googleTranslateElementInit() {
						  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.SIMPLE, gaTrack: true, gaId: 'UA-40902095-1'}, 'google_translate_element');
						}
						</script>
            <script type="text/javascript" src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>
          </aside>
          <header>
            <!--h1>...</h1>
						<p>						...						</p--> </header>
          <section>
            <h1>Advanced HomeGenie Programming</h1>
            <p> </p>
            <h2>Paradigm</h2>
            <p>One important component of HomeGenie is its <em>Automation
                Program Engine (APE)</em>. </p>
            <p>APE can be imagined as the <a target="_blank" title="Central Nervous System on Wikipedia"
                href="http://en.wikipedia.org/wiki/Central_nervous_system">Central
                Nervous System</a> of HomeGenie. So it integrates the
              information that it receives from, and coordinates the activity
              of, all modules (connected devices, services, virtual modules,
              etc..).</p>
            <p>Programs running inside APE can thus be imagined as <a target="_blank"
                title="Neuron on Wikipedia" href="http://en.wikipedia.org/wiki/Neuron">nerve
                cells</a> that processes and transmits information through event
              signals.<br>
              So an automation program can receive signals from any modules (or
              external service) and may react generating other signals that are
              then processed from the system.</p>
            <p>APE programs&nbsp;are built using the CSharp (C#) language. This
              kind of programs are also called <strong>APP </strong>(<em>Automation
                Program Plugin</em>) and can be managed from HomeGenie
              Automation section as already seen for <a title="Wizard Scripts"
                href="scenarios.html">Wizard Scripts</a>.</p>
            <p>HomeGenie APPs can implement any sort of new functionality with
              few lines of code, taking advantage of some <strong>Helper
                Classes</strong> that will make easier, even for novice
              programmers, to control automation modules and interoperate with
              external services and "things". These helper classes will also try
              to make program's instructions sound more like human readable
              sentences.</p>
            <section>
              <h2>Quick start</h2>
              <h3>Adding a new automation program</h3>
              <p> Since automation programs are grouped into categories, first
                we have to choose a group for the program (groups are
                user-definable). After that, in the <i>Action</i> menu of the
                group's programs screen, we'll have the button for adding the
                new program and that will bring us to the <i>Program Editor</i>.<br>
                Since default program type of newly added program is "Wizard
                Script" so, beside the program name, we'll also have to switch
                type to <i>"C# Program"</i>. </p>
              <p align="center"> <a href="images/docs/program_editor.png" class="top_up"><img
                    src="images/docs/program_editor.png" border="1" width="300"></a>
              </p>
              <p> Once done that, as we can see in the above screenshot, we can
                actually edit two portions of code. The first one is called the
                <i>Trigger Code</i>, while the second one is the <i>Code to Run</i>.
              </p>
              <p> <i>Trigger Code</i> is a portion of C# code that is used for
                initializing program parameters and signaling when the <i>Code
                  to Run</i> has to be executed.<br>
                To make the <i>Code to Run</i> to be executed, <i>Trigger Code</i>
                will return a <i>'true'</i> or <i>'false'</i> otherwise. </p>
              <h4>Background Programs</h4>
              <p> Beside this "trigger"-&gt;"action" scenario, sometimes is
                desiderable to have the <i>Trigger Code</i> containing just a <i>"return
                  true;"</i> instruction, so that the <i>Code to Run</i> will
                be executed straight away. Then, in the <i>Code to Run</i>,
                we'd call <b>Program.GoBackground()</b> helper method or we'd
                have some infinite looping routine. <br>
                This scenario is meant to be used when we want a little app
                running in the background, modifying and extending actively the
                system behavior. </p>
              <p> As an example of <i>Background Program</i>, you can see the
                source code of the <i>Dimmers Level Memory</i> program. This
                program actively monitors dimmers level changes, for storing the
                last memory value and for then recalling it when lights are
                switched on. </p>
            </section>
            <h2>Helper Classes</h2>
            <h3>Making <i>things</i> simple</h3>
            <p> <img src="images/genie.png" align="left" height="128" hspace="10"
                vspace="10"> You don't have to learn much about C# language.
              Neither you need to know much about <a href="http://en.wikipedia.org/wiki/Web_service"
                target="_blank">Web Services</a> or <a href="http://en.wikipedia.org/wiki/XML"
                target="_blank">XML</a> and <a href="http://en.wikipedia.org/wiki/JSON"
                target="_blank">JSON</a> stuff. The basics would be enough. </p>
            <p> HomeGenie <i>Helper Classes</i> are almost making <i>"things"</i>
              speak your language, so that you can start straight away by just
              writing down some plain instructions. <br>
              Perhaps some of the names used may sound funny... but... think of
              it: that is already one reason to remeber them. =) </p>
            <p> The following table is a brief introduction to <i>Helper
                Classes</i>. </p>
            <div class="compactlist" _style="margin-left:140px">
              <ul>
                <li>
                  <h4>ModulesManager</h4>
                  <p> This class let you select a set of modules on which to
                    operate. It implements methods for selecting by a given
                    group, device type, feature, property... Examples: </p>
                  <pre class="csharp" style="font-size:8pt">// turning on a light by name
Modules.WithName("Porch Light").On();										

// turning off all lights in a group 										
Modules
	.InGroup("Kitchen")
	.OfDeviceType("Light,Dimmer")
.Off();

// turning off all lights and dimmers in the house
Modules.OfDeviceType("Light,Dimmer").Off();

</pre> </li>
                <li>
                  <h4>NetHelper</h4>
                  <p> The <i>Net</i> helper class is for sending e-mails and
                    calling web services. When calling a web service, this
                    helper class will also convert received JSON or XML response
                    into a <a href="http://msdn.microsoft.com/en-us/library/vstudio/dd264741.aspx"
                      target="_blank">dynamic</a>, so that you don't have to
                    worry about parsing received data: </p>
                  <pre class="csharp" style="font-size:8pt">var weatherdata = Net.WebService("http://myweatherserv.ice/api/conditions/mycity.json").GetData();
var temperature = weatherdata.TemperatureC;</pre>
                </li>
                <li>
                  <h4>EventsHelper (When)</h4>
                  <p> Formerly exposed as <i>When</i> helper class, it is used
                    for listening to events received from connected devices
                    (modules) and so, having own code for handling custom
                    automation tasks or logic: </p>
                  <pre class="csharp">When.ModuleParameterChange( (module, changedparameter) =&gt; {
	if (module.Is("Bedroom Sensor") &amp;&amp; changedparameter.Is("Sensor.Temperature") &amp;&amp; changedparameter.DecimalValue &lt; 19.5)
	{
		// brrr... it's getting cold, take some action here.
	}
	return true;
} );</pre>
                  <p> This class is also used for creating own <i>WebService
                      API</i> as shown in this example: </p>
                  <pre class="csharp" style="font-size:8pt;">When.WebServiceCallReceived("welcomeapi/Example.Greets", ( username ) =&gt; {
    return "Hi " + username + ", welcome aboard!";
  });</pre>
                  <p> that code will make our program respond to http calls:<br>
                  </p>
                  <pre class="csharp">example client request:
	"http://&lt;homegenie_address&gt;/api/welcomeapi/Example.Greets/Mario+Rossi"
homegenie response (handled by custom automation program):
	--&gt; "Hi Mario Rossi, welcome aboard!"</pre>
                </li>
                <li>
                  <h4>ProgramHelper</h4>
                  <p> <i>Program</i> helper class is used to get/set custom
                    program parameters, associating a control widget for
                    displaying program data in the control page and other
                    strictly program-related tasks. It also have methods for
                    speech synthesys output (<i>Program.Say</i>) and for opening
                    popup messages in the UI (<i>Program.Notify</i>). </p>
                </li>
                <li>
                  <h4>SettingsHelper</h4>
                  <p> <i>....</i></p>
                </li>
                <li>
                  <h4>SerialPortHelper</h4>
                  <p> <i>....</i></p>
                </li>
                <li>
                  <h4>RaspberrySharp</h4>
                  <p> <i>....</i></p>
                </li>
              </ul>
            </div>
            <!--
            <h2>Processing event signals</h2>            <h2><br>
            </h2>            <h2>Generating event signals</h2>
            <h2><br>            </h2>
            <h2>Virtual Modules</h2>            <p><br>
            </p>            <p><br>
            </p>            <p><br>
            </p>-->
            <h2> </h2>
            <h2>Some Examples</h2>
            <section>
              <h3>Builtin APPs Overview</h3>
              <p> Going to <i>Configure-&gt;Automation</i> menu in HomeGenie,
                you will find installed by default, some programs as useful
                examples. You can also view and edit the source code by clicking
                on the <i>Edit Program</i> button. <br>
                The following table shows and describes some of these. </p>
              <div class="compactlist">
                <ul>
                  <li>
                    <h4>Dimmers Level Memory (Features)</h4>
                    <p> This program adds memory feature to dimmer lights. It is
                      also an example of how to make a program react to module
                      events by using <i>When.ModuleParameterChange</i> helper
                      method. </p>
                  </li>
                  <li>
                    <h4>Z-Wave - Lights/Switches Level Poll (Features)</h4>
                    <p> Adds polling feature to Z-Wave lights and switches. It
                      periodically sends a command to verify if the device is
                      turned on/off. </p>
                  </li>
                  <li>
                    <h4>Z-Wave - Wake Up Notify (Features)</h4>
                    <p> Query a Z-Wave sensor when a Wake Up Notify is received
                      from it. It is used to update periodically sensor values
                      (eg. temperature, luminance, ...). </p>
                  </li>
                  <li>
                    <h4>Sunrise/Sunset Lights Control (Features)</h4>
                    <p> Turn On/Off, when the sun rise/set, all lights having
                      this feature enabled. This is also an example about how to
                      access data stored by other programs (eg. Weather
                      Underground Widget) and how to add new features to system
                      with <i>Program.AddFeature</i> helper method. </p>
                  </li>
                  <li>
                    <h4>Group Lights On/Off (Scenes)</h4>
                    <p> Turn On/Off all lights belonging to a given group. </p>
                  </li>
                  <li>
                    <h4>Power loss detection (Monitor)</h4>
                    <p> This is to be used with devices supporting energy
                      metering. When "Power loss detection" feature is enabled,
                      HomeGenie will monitor the device and will "tell" when
                      there is a power loss. This is also an example using
                      Speech Syntesys via <i>Program.Say</i> helper method. </p>
                  </li>
                  <li>
                    <h4>Philips Hue Control (Devices and Things)</h4>
                    <p> This program is a good example of using <i>Virtual
                        Modules</i> and <i>Dynamic WebService API</i> features.
                      It integrates into HomeGenie, <a href="http://meethue.com"
                        target="_blank">Philips Hue Lights</a> via the <i>Philips
                        Hue Bridge</i>. </p>
                  </li>
                  <li>
                    <h4>Weather Underground Widget (Devices and Things)</h4>
                    <p> This program access <a href="http://wunderground.com/"
                        target="_blank">Weather Underground</a> web service and
                      stores some useful values like external temperature,
                      sunset and sunrise time, current weather condition and
                      such. These values can then be used for various automation
                      tasks by other programs (see <i>Sunrise/Sunset Lights
                        Control</i> above). </p>
                  </li>
                  <li>
                    <p> </p>
                    <br>
                  </li>
                </ul>
              </div>
            </section>
            <br>
            <section name="learnbyexmple">
              <h3>Example Usage of Helper Classes</h3>
              <h4>Controlling modules</h4>
              <p>These examples show how <i>Modules</i> helper class is used
                for selecting and controlling modules.</p>
              <pre class="csharp">Modules.WithName("Porch Light").On();</pre>
              <pre class="csharp">Modules
	.InGroup("Living Room")
	.OfDeviceType("Dimmer,Light")
.Off();</pre>
              <h4>Taking some action when a module property change</h4>
              <p>This one, could be an example of <i>Background Program</i>. So
                in the <i>Trigger Code</i> we expect to just have a <i>"return
                  true"</i>. While the following is the <i>Code to Run</i>: </p>
              <pre class="csharp">When.ModuleParameterChange( (module, changedparameter) =&gt; {
	if (module.Is("My Temperature Sensor") &amp;&amp; changedparameter.Is("Sensor.Temperature"))
	{
		var myheater = Modules.WithName("Heater").Get();
		if (myheater.WasFound) // this may sound a bit funny =)
		{
			if (myheater.IsOff &amp;&amp; changedparameter.DecimalValue &lt; 21.5)
			{
				myheater.On();
			}
			else if (myheater.IsOn)
			{
				myheater.Off();
			}
		}
	}
	return true;
} );
Program.GoBackground();</pre>
              <a name="raspi"></a>
              <h3>Raspberry Pi Examples (RaspberrySharp Helper Class)</h3>
              <h4>Creating IoT enabled distance sensor with Raspberry Pi and
                HomeGenie</h4>
              <p> <a href="images/docs/hgthing_04.jpg" class="top_up" title="Looks a bit weird... but it works! =)"><img
                    src="images/docs/hgthing_04.jpg" align="left" border="1" height="200"
                    hspace="20" vspace="10"></a> One of the included programs in
                RaspberrySharp group is the <i>"HCSR04 - Ultrasonic Ranging
                  Module"</i> program. This example require to be running on a <a
                  target="_blank" href="http://www.raspberrypi.org/">Raspberry
                  Pi</a> and have a <a target="_blank" href="https://www.google.it/search?q=HCSR04&amp;aq=f&amp;oq=HCSR04&amp;aqs=chrome.0.57j0l3j62l2.1971j0&amp;sourceid=chrome&amp;ie=UTF-8">HCSR04
                  module</a> wired to it. </p>
              <p> There are plenty of other things that can be connected to
                Raspberry Pi, and so, many possible applications: </p>
              <ul>
                <li>- <a target="_blank" href="http://www.raspberrypi-spy.co.uk/2013/03/top-10-things-to-connect-to-your-raspberry-pi/">"Top
                    10 Things to Connect to Your Raspberry Pi"</a></li>
                <li>- <a target="_blank" href="http://learn.adafruit.com/category/raspberry-pi">"AdaFruit
                    Learning System"</a></li>
              </ul>
              <p> HomeGenie automation engine is using <a href="https://github.com/raspberry-sharp/raspberry-sharp-io"
                  target="_blank">Raspberry#-IO</a> library for GPIO
                programming, turning Raspberry Pi into an integrated and ready
                to use <a href="http://en.wikipedia.org/wiki/Internet_of_Things"
                  target="_blank">Internet of Things</a> development platform. </p>
              <p> This is the <i>Trigger Code</i> of the example program: </p>
              <pre class="csharp">// this Setup delegate will be executed once, when the program is enabled
Program.Setup(()=&gt;
{
  // set the widget that will display this program data (the distance).
  // the builtin 'homegenie/generic/sensor' widget, 
  // will display all parameters starting with Sensor.*
  Program.AddControlWidget("homegenie/generic/sensor");
  
  // initialize program parameters
  Program.Parameter("Sensor.Distance").Value = "";
  Program.Parameter("Sensor.StatusMessage").Value = "";
  
  // it makes program to respond to webservices calls:
  //     http://<hg_address>/api/EmbeddedSystems.Raspberry/HCSR04/Sensor.Distance
  When.WebServiceCallReceived("EmbeddedSystems.Raspberry/HCSR04/Sensor.Distance", ( option ) =&gt; 
  {
    return "{ 'ResponseValue' : '" + Program.Parameter("Sensor.Distance").Value + "' }";
  }); 
}); // end program setup
return true; // execute the 'Code to Run'</hg_address></pre>
              <p> This, is the <i>Code to Run</i>: </p>
              <pre class="csharp">// example code adapted from https://github.com/raspberry-sharp/
//
var triggerPin = ConnectorPin.P1Pin03.ToProcessor();
var echoPin = ConnectorPin.P1Pin07.ToProcessor();

using (var connection = new HcSr04Connection(triggerPin, echoPin))
{
    while (Program.IsEnabled)
    {
          
        try
        {
		    var distance = connection.GetDistance();
		    Program.Parameter("Sensor.Distance").Value = String.Format("{0:0.0}", (distance * 100));
		    Program.Parameter("Sensor.StatusMessage").Value = "OK";
        }
        catch
        {
            Program.Parameter("Sensor.Distance").Value = String.Format("{0:0.0}", (new Random().NextDouble() * 100));
            Program.Parameter("Sensor.StatusMessage").Value = "Warning: HcSr04 Module Timeout. Reported value is randomly generated.";
            // sleep some more if there was an error
            Pause ( 4 );
        }
      
        Pause( 1 ); // 1 second interval between parameter updates
    } 
}</pre>
              <p> At line #7 of the <i>Trigger Code</i> we see the instruction
                <b>Program.AddControlWidget("homegenie/generic/sensor")</b>.
                This will make our program to show up in module list when adding
                a module to a group. So after adding it to a group, the widget <i>Generic
                  Sensor</i> will display all program parameter starting with <i>Sensor.*</i>
                (and so, Sensor.Distance and Sensor.StatusMessage). <br>
                The following screenshot, show how the program appear in the <i>Control</i>
                menu: </p>
              <p align="center"><a href="images/docs/control_things.png" class="top_up"><img
                    src="images/docs/control_things.png" border="1" width="300"></a></p>
              <p> With these few lines of code, we got the distance sensor
                program working, displaying values in the control menu and
                having also its own web service api. =) </p>
            </section>
            <!--
            <h4>Adding "Activity LED" to HomeGenie</h4>            <p> This program will add an activity LED to HomeGenie. It will              blink a LED connected to the RaspberryPi's P1-Pin11 (GPIO17),              whenever any module parameter has changed. This is a <i>Background
                Program</i> too. </p>            <pre class="csharp">// Initially turn the LED offvar activityled = new PinConfiguration[] { ConnectorPin.P1Pin11.Output().Name("ActivityLed").Disable() };// 
When.ModuleParameterChange( (module, parameter) =&gt; { 	using (var connection = new GpioConnection(activityled))	{      	connection.Blink("ActivityLed", 100); // 100 ms
	}	return true;});Program.GoBackground();</pre>
            <h4>Adding "Ready LED" to HomeGenie</h4>            <p> Beside the <i>Activity</i> we can also add a <i>Ready</i> LED.              The <i>Ready LED</i> program, will make a LED, connected to the              GPIO P1-Pin13, continuosly blinking. So, after HomeGenie started
              up, user will acknowledge that the system started and that it is              correctly operating. </p>            <div align="center"> <a href="images/docs/diy/step10.jpg" class="top_up"><img
                  src="images/docs/diy/step10.jpg" border="1" hspace="20" vspace="8"                  width="280"></a> </div>            <pre class="csharp">// Initially turn the LEDs off
var systemleds = new PinConfiguration[] {	ConnectorPin.P1Pin11.Output().Name("ActivityLed").Disable(), 	ConnectorPin.P1Pin13.Output().Name("ReadyLed").Disable()};
// using (var connection = new GpioConnection(systemleds)){  	When.ModuleParameterChange( (module, parameter) =&gt; {
    	connection.Blink("ActivityLed", 100); // 100 ms      	return true;	});	//
  	while(Program.IsEnabled)     {      	connection.Toggle("ReadyLed");	    Pause(.5); // 500 ms on
    }}</pre>            --> </section>
          <a href="learn.html">[back to index]</a>
          <footer> </footer>
        </article>
      </div>
      <!-- #main --> </div>
    <!-- #main-container -->
    <div class="footer-container">
      <footer class="wrapper">
        <h3>© 2013 G-Labs</h3>
      </footer>
    </div>
  </body>
</html>
